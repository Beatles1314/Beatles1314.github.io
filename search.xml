<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高可用、高并发的分布式服务架构</title>
      <link href="/2020/07/20/web%E5%BC%80%E5%8F%91/%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/07/20/web%E5%BC%80%E5%8F%91/%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><p>【<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651959830&idx=1&sn=ce1c5a58caed227d7dfdbc16d6e1cea4&chksm=bd2d07ca8a5a8edc45cc45c4787cc72cf4c8b96fb43d2840c7ccd44978036a7d39a03dd578b5&scene=21#wechat_redirect" target="_blank" rel="noopener">参考文献</a>】</p><p>高并发的准则是：<code>水平扩展 + 垂直扩展</code>。</p><h3 id="垂直扩展"><a href="#垂直扩展" class="headerlink" title="垂直扩展"></a>垂直扩展</h3><p>垂直扩展的常见方法：</p><ol><li>提升单机性能，如优化CPU、网卡、硬盘、内存等。</li><li>提升单机架构性能：如使用Cache减少磁盘IO、使用异步框架提升单服务吞吐量、使用无锁数据结构减少响应时间等。</li></ol><h3 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h3><p>水平扩展主要基于以下架构进行：</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOzhYFaiaBYrHFsYH8xiaRBvoibvKYatFicUCQoXQNx9XpQL3sMP9icNY4CQoHFSiaPperAeynDsNDEAkK4w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h4 id="反向代理层"><a href="#反向代理层" class="headerlink" title="反向代理层"></a>反向代理层</h4><p>通过”DNS”轮询实现，将一个域名配置多个解析ip，每次DNS解析请求来访问dns-server，会轮询返回以上ip。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/YrezxckhYOzhYFaiaBYrHFsYH8xiaRBvoibic2hUdJC52WITLf8A8ZrECJqwIORIJfaW4fBGruntoKkfnibKsS0I1mA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h4 id="web应用层"><a href="#web应用层" class="headerlink" title="web应用层"></a>web应用层</h4><p>通过nginx实现，当应用层出现瓶颈，通过增加应用节点，在nginx进行配置即可实现。</p><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><p>通过连接池实现，service层出现瓶颈时，通过在新机器上增加service的部署，即可水平扩展。</p><h4 id="数据库层"><a href="#数据库层" class="headerlink" title="数据库层"></a>数据库层</h4><p>当存在大量请求时，通过对数据库根据业务逻辑进行拆分，将请求分散到不同的库中，以减轻数据库的读写压力。</p><p>常用的划分手段为：</p><p>1）以范围进行拆分：如，user0存储uid为1-1kw的用户，user1存储uid为1kw-2kw的用户。好处：规则简单，易于处理；数据存储均衡性较好；容易扩展；不足：请求负载不一定均衡，一般来说，新注册用户比老用户活跃，高峰期可能对某个范围的库造成压力。</p><p>2）以哈希进行拆分：每一个数据库，根据hash规则存储数据。好处是：请求均衡性较好；不足：不容易扩展，可能需要进行数据迁移。</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>【<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651959728&idx=1&sn=933227840ec8cdc35d3a33ae3fe97ec5&chksm=bd2d046c8a5a8d7a13551124af36bedf68f7a6e31f6f32828678d2adb108b86b7e08c678f22f&scene=21#wechat_redirect" target="_blank" rel="noopener">参考链接</a>】</p><p>高可用的核心是：<code>冗余 + 故障转移</code>，从架构上需要进行分层，确保各层都保持高可用的状态。</p><p>常见互联网分布式架构如上，分为：</p><p>1.客户端层：典型调用方是浏览器browser或者手机应用APP。<br>2.反向代理层：系统入口，反向代理。<br>3.站点应用层：实现核心应用逻辑，返回html或者json。<br>4.服务层：如果实现了服务化，就有这一层，即站点应用层不直接访问数据库，service层通过各个数据部门提供封装的对外接口进行数据的操纵。<br>5.数据-缓存层：缓存加速访问存储。<br>6.数据-数据库层：数据库固化数据存储。</p><h3 id="【客户端-gt-反向代理层】"><a href="#【客户端-gt-反向代理层】" class="headerlink" title="【客户端 -&gt; 反向代理层】"></a>【客户端 -&gt; 反向代理层】</h3><p>客户端即是用户发起请求的设备，该过程需要在反向代理层做到冗余及故障转移。</p><p>例如，两台nginx反向代理服务器，一台用于线上服务，另外一台作为冗余，自动故障转移使用keepalived存活探测进行。</p><h3 id="【反向代理层-gt-站点层】"><a href="#【反向代理层-gt-站点层】" class="headerlink" title="【反向代理层 -&gt; 站点层】"></a>【反向代理层 -&gt; 站点层】</h3><p>通过在nginx中配置负载均衡多个冗余站点进行自动故障转移实现该层的高可用。</p><p>例如，使用淘宝的<code>nginx_upstream_check_module</code>进行健康检查，配置如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> name <span class="token punctuation">{</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.21</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.22</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>    check interval<span class="token operator">=</span><span class="token number">3000</span> rise<span class="token operator">=</span><span class="token number">2</span> fall<span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">timeout</span><span class="token operator">=</span><span class="token number">1000</span> type<span class="token operator">=</span><span class="token keyword">http</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【站点层-gt-服务层】"><a href="#【站点层-gt-服务层】" class="headerlink" title="【站点层 -&gt; 服务层】"></a>【站点层 -&gt; 服务层】</h3><p>通过冗余服务实现高可用，可以使用服务连接池进行，例如，RPC Client的服务连接池。</p><h3 id="【站点层-服务层-gt-数据缓存层】"><a href="#【站点层-服务层-gt-数据缓存层】" class="headerlink" title="【站点层/服务层 -&gt; 数据缓存层】"></a>【站点层/服务层 -&gt; 数据缓存层】</h3><p>通过增加数据缓存层的冗余来达到服务的高可用状态，例如，Redis集群模式，当主节点宕机时，启用从节点进行恢复等。</p><h3 id="【站点层-服务层-gt-数据库层】"><a href="#【站点层-服务层-gt-数据库层】" class="headerlink" title="【站点层/服务层 -&gt; 数据库层】"></a>【站点层/服务层 -&gt; 数据库层】</h3><p>数据库层通过<code>读写分离，主从同步</code>，可以通过实现读库的冗余和写库的冗余进行自动故障转移。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【1】<a href="https://www.cnblogs.com/ningskyer/articles/8342698.html" target="_blank" rel="noopener">高可用+高并发+负载均衡架构设计</a></p>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MQ总结</title>
      <link href="/2020/07/19/web%E5%BC%80%E5%8F%91/MQ%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/19/web%E5%BC%80%E5%8F%91/MQ%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><p>消息队列主要有以下应用场景：</p><ol><li>应用解耦，通过约定好应用间交换数据格式，可以直接通过生产消费的模式进行应用解耦，上游应用无需关注下游应用的实现逻辑，从而进行应用解耦。</li><li>解决异步消息，这也是消息队列主要的应用场景之一。</li><li>流量消峰的问题，可以减少突发并发压力带来的影响。</li><li>日志处理（kafka）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>memcached vs redis</title>
      <link href="/2020/07/18/web%E5%BC%80%E5%8F%91/memcached%20vs%20redis/"/>
      <url>/2020/07/18/web%E5%BC%80%E5%8F%91/memcached%20vs%20redis/</url>
      
        <content type="html"><![CDATA[<h2 id="memcached-vs-redis"><a href="#memcached-vs-redis" class="headerlink" title="memcached vs redis"></a>memcached vs redis</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>memcached提供的功能是Redis的提供的功能的子集，Redis可以提供更丰富的数据类型及功能。</p><h3 id="缓存大小"><a href="#缓存大小" class="headerlink" title="缓存大小"></a>缓存大小</h3><p>当缓存相对较小且数据为静态数据时，使用memcached是一个不错的选择，因为其存储的元数据消耗更少的内存。</p><p>当数据是动态的时候，memcached的内存管理效率下降快，内存会变成碎片，在数据较大的时候伴随着数据的序列化，需要更多的空间进行存储。</p><h3 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h3><p>memcached是多线程，单机数据共享的（只能扩展机器，不支持不同主机间进行共享），因此可以通过增加主机进行扩展。</p><p>redis是单线程，可以通过对集群进行配置进行扩展，但集群扩展的操作相对复杂。</p><h2 id="Redis如何动态扩容"><a href="#Redis如何动态扩容" class="headerlink" title="Redis如何动态扩容"></a>Redis如何动态扩容</h2><p>场景描述：生产环境Redis内存爆满，如何在不重启Redis服务器的情况动态扩容？</p><p>单机模式：在单机模式下，可以通过redis客户端查看redis服务可用的最大内存，如果最大内存远未到达机器上限，则可以通过客户端进行配置而无需重启。</p><pre><code># 当前最大值为1Gconfig get maxmemory 1073741824# 设置最大值为3Gconfig set maxmemory 3221225472</code></pre><p>集群模式：使用<code>redis-trib.rb</code>工具向集群进行动态扩容，增加节点的顺序应该是先增加Master节点，然后再增加Slave节点。</p><pre><code># 增加新节点到集群中ruby redis-trib.rb add-node newhost:newport clusterhost:clusterport</code></pre><p>节点新增到集群后，新节点不会有任何数据，因为没有分配任何slot，后续需要手动分配，分配的方法为从已有的master节点进行分配，命令如下所示：</p><pre><code>ruby redis-trib.rb reshard cluster-master-host:port</code></pre><p><code>redis-cli</code>登录从节点，分配新加入节点的主从关系：</p><pre><code>cluster replicate 主节点ID</code></pre><p>至此完成Redis集群的动态扩容。</p>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月-子时杂谈</title>
      <link href="/2020/06/30/%E5%AD%90%E6%97%B6%E6%9D%82%E8%B0%88/2020%E5%B9%B47%E6%9C%88-%E5%AD%90%E6%97%B6%E6%9D%82%E8%B0%88/"/>
      <url>/2020/06/30/%E5%AD%90%E6%97%B6%E6%9D%82%E8%B0%88/2020%E5%B9%B47%E6%9C%88-%E5%AD%90%E6%97%B6%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="7月2日"><a href="#7月2日" class="headerlink" title="7月2日"></a>7月2日</h2><p>听到两句触动我的话：</p><ul><li>努力让自己变得更好是最可爱的虚荣。</li><li>力争上游。</li></ul><p>趁着年轻，力争上游。</p><h2 id="7月10日"><a href="#7月10日" class="headerlink" title="7月10日"></a>7月10日</h2><p>生活不开心的事多得是，看不看开感觉不太重要了，因为无论如何，发生的事情就是发生了，倒不如把情绪抛一边，好好向前走。</p><h2 id="7月19日"><a href="#7月19日" class="headerlink" title="7月19日"></a>7月19日</h2><p>冲凉的时候唱歌好嗨<del>发现好久没有去KTV了！<br>最近循环的都是eason的歌单</del>那场精心策划的日出日落线上Live简直太赞了。</p>]]></content>
      
      
      <categories>
          
          <category> 子时杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
